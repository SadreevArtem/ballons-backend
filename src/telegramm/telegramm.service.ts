import { Injectable } from '@nestjs/common';
import { Ctx, Help, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { TelegrafContext } from 'src/interfaces/context.interface';
// import { UsersService } from 'src/users/users.service';
import { Telegraf } from 'telegraf';

@Injectable()
@Update()
export class TelegrammService {
  constructor(
    @InjectBot() private bot: Telegraf<TelegrafContext>,
    // private readonly usersService: UsersService,
  ) {}
  @Start()
  async start(@Ctx() ctx: TelegrafContext) {
    await ctx.reply(
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –±–æ—Ç, –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
    );
  }

  @Help()
  async onHelp(): Promise<string> {
    return '–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º';
  }

  @On('text')
  async onMessage(@Ctx() ctx: TelegrafContext) {
    if (ctx.message.from.is_bot) {
      await ctx.reply('permission failed');
    }
    if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9\s-]+$/.test(ctx.text) || ctx.text.length > 35) {
      await ctx.reply(
        '‚õî –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤',
      );
      return;
    }
    try {
      await ctx.reply('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ... üîÑ');

      await ctx.replyWithHTML('–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑');
    } catch (error) {
      console.log(error);
    }
  }
}
